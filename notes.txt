在Windows上安装Git

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


创建版本库
第一步
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。

第二步
git init 初始化一个Git仓库


添加文件到Git仓库，分两步：
git add <file> 可反复多次使用，添加多个文件；
git commit -m <message>

git status 工作区的状态, 告诉你有文件被修改过
git diff 可以查看修改内容

HEAD指向的版本就是当前版本
git reset --hard commit_id 版本的历史之间穿梭
git log可以查看提交历史，以便确定要回退到哪个版本。
git reflog查看命令历史，以便确定要回到未来的哪个版本。

viewing a single git commit’s history
git show <commit-hash>
https://www.warp.dev/terminus/git-commit-history

Changing an Older or Multiple Commits
git rebase -i HEAD~5
https://linuxize.com/post/change-git-commit-message/

exit Vim (:wq)
https://stackoverflow.com/questions/4708645/vim-for-windows-what-do-i-type-to-save-and-exit-from-a-file


管理修改
第一次修改 -> git add -> 第二次修改 -> git add -> git commit
每次修改，如果不用git add到暂存区，那就不会加入到commit中。


撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。


删除文件

命令git rm用于删除一个文件。

删错了 必须在commit之前操作
$ git restore --staged test.txt
$ git checkout -- test.txt
恢复文件到版本库最新版本


添加远程库
$ git remote add origin git@server-name:path/repo-name.git

第一次推送，使用命令：
$ git push -u origin maste
推送master分支的所有内容

此后每次推送，使用命令：
$ git push origin master
推送最新修改

查看远程库信息
$ git remote

查看远程库详细信息
$ git remote -v

删除远程库
$ git remote rm <name>


从远程库克隆
$ git clone <repository address>


改变分支名称
$ git branch (-m | -M) [<oldbranch>] <newbranch>


创建与合并分支

查看分支:
$ git branch

创建分支：
$ git branch <name>

切换分支：
$ git checkout <name>
$ git switch <name>

创建+切换分支：
$ git checkout -b <name>
$ git switch -c <name>

合并某分支到当前分支：
$ git merge <name>

删除分支：
$ git branch -d <name>

看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit


分支管理策略

强制禁用Fast forward模式
$ git merge --no-ff -m "merge with no-ff" dev
--no-ff参数，表示禁用Fast forward


Bug分支

储藏当前工作现场
$ git stash

假定需要在master分支上修复，就从master创建临时分支
$ git checkout master

$ git checkout -b issue-101
修复完成

回到dev分支干活
$ git switch dev

看看git stash list
$ git stash list

Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
方法一
恢复
$ git stash apply
删除
$ git stash drop

方法二
恢复的同时删除
$ git stash pop，

在master分支上修复的bug，想要合并到当前dev分支，可以用：
$ git cherry-pick <commit>


Feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过命令强行删除。
$ git branch -D <name>


多人协作

多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

查看远程库信息
$ git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用
$ git push origin branch-name
如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用
$ git checkout -b branch-name origin/branch-name
本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用
$ git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


rebase操作可以把本地未push的分叉提交历史整理成直线；
$ git rebase


Multi-line Git Commit Message

Method 1: Using -m flag multiple times
e.g:
git commit index.js -m "Note the Changes" -m "- Fixed a bug" 

Method 2: Using quotes in the shell
e.g:
$ git commit index.js -m "My Changes
- Fixed a critical bug
- Probably added more bugs
"
https://www.shells.com/l/en-US/tutorial/How-to-Add-a-Git-Commit-Message


error

"Remote Origin Already Exists"
$ git remote
$ git remote -v
$ git remote remove origin  //remove the link of origin （link of remote server）
https://www.cloudbees.com/blog/remote-origin-already-exists-error


"failed to push some refs to [remote repo]"
$ git pull origin master
$ git push -u origin master
https://www.freecodecamp.org/news/error-failed-to-push-some-refs-to-how-to-fix-in-git/




